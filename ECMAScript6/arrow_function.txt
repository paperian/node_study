모듈은 일반적으로 상수로 선언
const os = require('os');

변경할 것이 아니라면 전부!다 상수로!

화살표함수란??
화살표함수란??
화살표함수란??

// 함수 리터럴
function() {

}  

// 이렇게 표현 가능
() => {

}

const test = () => {
	return 'A' ;
};

// 이렇게 한줄로도 표현 가능
const test = () => "A";

console.log(test());


어떠한 경우에 화살표 함수를 많이 쓰나?

const testArray = [1,2,3,4,5,6,7,8];

testArray = testArray.filter(function(item){
	return item > 4;	
});

// 조금 더 간단해짐
testArray = testArray.filter((item){
	return item > 4;	
});

// 더 간단해짐
testArray.filter((item) => item > 4);


정리하자면
function () {}
을
() => {} 로 쓴다는거!!!


###############################################################

const fs = require('fs');

const file = fs.readFileSync('test.js');	// 파일의 내용이 버퍼 객체로 리턴댐
console.log(file.toString('utf8'));	// 파일 내용을 찍고 싶다면

const file = fs.readFileSync('test.js', 'utf8');	// 파일의 내용이 리턴되는듯
console.log(file)// 파일 내용을 찍고 싶다면


// 비동기(대기와 지연 없이 동작) 방식으론
fs.readFile('test.js', 'utf8', (error, result) => {
	console.log(error);	
	console.log(result);	
});


// node js 플랫폼 내부에선 쓰레드 4개가 항상 돌아

console.log('A');
setTimeout( () => {
	console.log('C');
	console.log('D');
}, 0);
console.log('B');

// 순서는 A,B,C,D 임.
// 이는 자바스크립트가 내부적으로 쓰레드를 하나만 운용하는 것 처럼 사용하기 때문
// setTimeout 에서는 콜백함수를 예약을 걸어 둘 뿐임, 이 예약(대기)은 반드시 현재 단계가 끝난 이후에 실행됨


// 비동기 함수의 경우엔 예약을 걸어두고 다음으로 넘어감
// 동기 함수는 대기 및 지연이 발생함

fs.writeFile('a.txt', 'Hello world', (error) => {
	console.log('파일 쓰기 완료');
});


// 그리고! 동기 같은 경우 try catch로 예외 처리를 해줘야하지만
// 비동기의 경우 내부적으로 예외처리 다 되고,  매개변수로 error 관련 정보가 넘어감
